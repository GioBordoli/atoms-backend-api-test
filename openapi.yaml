openapi: 3.0.0
info:
  title: Requirements Analysis API
  description: API for analyzing requirements against INCOSE/EARS standards and regulatory compliance with organization-based document management
  version: 2.0.0
  contact:
    name: Requirements Analysis API Support
    email: support@requirement-refiner.com

servers:
  - url: https://requirement-refiner-api-egjmv5ar2a-uc.a.run.app
    description: Production server
  - url: http://localhost:8080
    description: Development server

paths:
  /health:
    get:
      summary: Health Check
      description: Check if the API is running
      tags:
        - Health
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time

  /api/organizations/{organizationId}/documents:
    get:
      summary: List Organization Documents
      description: Get a list of all documents in an organization's bucket
      tags:
        - Document Management
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization identifier
          schema:
            type: string
            example: "acme-corp"
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizationId:
                    type: string
                    example: "acme-corp"
                  documents:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "fda-regulation.pdf"
                        size:
                          type: integer
                          example: 1024000
                        created:
                          type: string
                          format: date-time
                        updated:
                          type: string
                          format: date-time
                  count:
                    type: integer
                    example: 5
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Upload Organization Documents
      description: Upload PDF documents to an organization's bucket with automatic versioning for duplicates
      tags:
        - Document Management
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization identifier
          schema:
            type: string
            example: "acme-corp"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: PDF files to upload
      responses:
        '200':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizationId:
                    type: string
                    example: "acme-corp"
                  files:
                    type: array
                    items:
                      type: string
                    example: ["fda-regulation.pdf", "iso-standard(1).pdf"]
                  message:
                    type: string
                    example: "Successfully uploaded 2 files"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/organizations/{organizationId}/documents/{documentName}:
    delete:
      summary: Delete Organization Document
      description: Delete a document from an organization's bucket
      tags:
        - Document Management
      parameters:
        - name: organizationId
          in: path
          required: true
          description: Organization identifier
          schema:
            type: string
            example: "acme-corp"
        - name: documentName
          in: path
          required: true
          description: Name of the document to delete
          schema:
            type: string
            example: "old-regulation.pdf"
      responses:
        '200':
          description: Document deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizationId:
                    type: string
                    example: "acme-corp"
                  document:
                    type: string
                    example: "old-regulation.pdf"
                  message:
                    type: string
                    example: "Document deleted successfully"
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/upload:
    post:
      summary: Upload Files (Legacy)
      description: Upload regulation PDF files to organization's Cloud Storage bucket - legacy endpoint for backward compatibility
      tags:
        - File Upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organizationId:
                  type: string
                  description: Organization identifier
                  example: "acme-corp"
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: PDF files to upload
      responses:
        '200':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizationId:
                    type: string
                    example: "acme-corp"
                  files:
                    type: array
                    items:
                      type: string
                    example: ["fda-regulation.pdf", "iso-standard.pdf"]
                  message:
                    type: string
                    example: "Successfully uploaded 2 files"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/ai:
    post:
      summary: Start Analysis Pipeline
      description: Start asynchronous requirements analysis pipeline
      tags:
        - Analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - original_requirement
                - regulation_document_name
                - organizationId
              properties:
                action:
                  type: string
                  enum: [startPipeline]
                  example: "startPipeline"
                original_requirement:
                  type: string
                  description: The requirement to analyze
                  example: "The system shall respond within 2 seconds"
                regulation_document_name:
                  type: string
                  description: Name of regulation document to analyze against
                  example: "fda-regulation.pdf"
                organizationId:
                  type: string
                  description: Organization identifier
                  example: "acme-corp"
                system_name:
                  type: string
                  description: Optional system name
                  example: "Payment Processing System"
                objective:
                  type: string
                  description: Optional system objective
                  example: "Process financial transactions securely"
                req_id:
                  type: string
                  description: Optional requirement ID
                  example: "REQ-001"
                temperature:
                  type: number
                  description: AI model temperature (0.0-1.0)
                  example: 0.1
                  minimum: 0.0
                  maximum: 1.0
            example:
              action: "startPipeline"
              original_requirement: "The system shall respond within 2 seconds"
              regulation_document_name: "fda-regulation.pdf"
              organizationId: "acme-corp"
              system_name: "Payment Processing System"
              objective: "Process financial transactions securely"
              req_id: "REQ-001"
              temperature: 0.1
      responses:
        '200':
          description: Pipeline started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  runId:
                    type: string
                    format: uuid
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  organizationId:
                    type: string
                    example: "acme-corp"
                  state:
                    type: string
                    enum: [QUEUED]
                    example: "QUEUED"
                  message:
                    type: string
                    example: "Analysis pipeline started successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get Pipeline Status
      description: Get the status of a running analysis pipeline
      tags:
        - Analysis
      parameters:
        - name: runId
          in: query
          required: true
          description: Pipeline run ID
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
        - name: organizationId
          in: query
          required: false
          description: Organization identifier
          schema:
            type: string
            example: "acme-corp"
      responses:
        '200':
          description: Pipeline status
          content:
            application/json:
              schema:
                type: object
                properties:
                  runId:
                    type: string
                    format: uuid
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  organizationId:
                    type: string
                    example: "acme-corp"
                  state:
                    type: string
                    enum: [QUEUED, RUNNING, DONE, FAILED]
                    example: "DONE"
                  started_at:
                    type: string
                    format: date-time
                  completed_at:
                    type: string
                    format: date-time
                  result:
                    $ref: '#/components/schemas/AnalysisResult'
                  error:
                    type: string
                    description: Error message if state is FAILED
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /analyze-requirement:
    post:
      summary: Analyze Requirement (Synchronous)
      description: Perform synchronous requirements analysis against INCOSE/EARS standards and regulatory compliance
      tags:
        - Analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - original_requirement
                - regulation_document_name
                - organizationId
              properties:
                original_requirement:
                  type: string
                  description: The requirement to analyze
                  example: "The system shall respond within 2 seconds"
                regulation_document_name:
                  type: string
                  description: Name of regulation document to analyze against
                  example: "fda-regulation.pdf"
                organizationId:
                  type: string
                  description: Organization identifier
                  example: "acme-corp"
                system_name:
                  type: string
                  description: Optional system name
                  example: "Payment Processing System"
                objective:
                  type: string
                  description: Optional system objective
                  example: "Process financial transactions securely"
                req_id:
                  type: string
                  description: Optional requirement ID
                  example: "REQ-001"
                temperature:
                  type: number
                  description: AI model temperature (0.0-1.0)
                  example: 0.1
                  minimum: 0.0
                  maximum: 1.0
            example:
              original_requirement: "The system shall respond within 2 seconds"
              regulation_document_name: "fda-regulation.pdf"
              organizationId: "acme-corp"
              system_name: "Payment Processing System"
              objective: "Process financial transactions securely"
              req_id: "REQ-001"
              temperature: 0.1
      responses:
        '200':
          description: Analysis completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/AnalysisResult'
                  - type: object
                    properties:
                      organizationId:
                        type: string
                        example: "acme-corp"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /docs:
    get:
      summary: API Documentation
      description: Interactive Swagger UI documentation
      tags:
        - Documentation
      responses:
        '200':
          description: HTML page with Swagger UI
          content:
            text/html:
              schema:
                type: string

  /openapi.yaml:
    get:
      summary: OpenAPI Specification
      description: OpenAPI 3.0 specification in YAML format
      tags:
        - Documentation
      responses:
        '200':
          description: OpenAPI specification
          content:
            application/x-yaml:
              schema:
                type: string

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request parameters"

    AnalysisResult:
      type: object
      properties:
        status:
          type: string
          enum: [success]
          example: "success"
        analysisJson:
          $ref: '#/components/schemas/Step1Analysis'
        analysisJson2:
          $ref: '#/components/schemas/Step2Analysis'
        analysisJson3:
          $ref: '#/components/schemas/Step3Analysis'
        processed_timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Step1Analysis:
      type: object
      description: INCOSE/EARS standards analysis
      properties:
        req_id:
          type: string
          example: "REQ-001"
        original_requirement:
          type: string
          example: "The system shall respond within 2 seconds"
        incose_format:
          type: string
          example: "The system shall respond to user requests within 2 seconds of receiving the request"
        ears_format:
          type: string
          example: "When a user request is received, the system shall respond within 2 seconds"
        incose_violations:
          type: array
          items:
            type: string
          example: ["Missing trigger condition", "Ambiguous response definition"]
        ears_violations:
          type: array
          items:
            type: string
          example: ["Missing system identification"]
        requirement_pattern:
          type: string
          example: "performance"
        quality_rating:
          type: string
          example: "7"
        feedback:
          type: string
          example: "Requirement shows good performance criteria but lacks specific trigger conditions"
        analysis_timestamp:
          type: string
          format: date-time

    Step2Analysis:
      type: object
      description: Regulatory compliance analysis
      properties:
        regulation_document:
          type: string
          example: "fda-regulation.pdf"
        relevant_passages:
          type: array
          items:
            type: object
            properties:
              section:
                type: string
                example: "Section 21.1"
              text:
                type: string
                example: "Systems must respond within regulatory timeframes"
              relevance_score:
                type: string
                example: "8"
              impact:
                type: string
                example: "Directly impacts response time requirements"
        compliance_concerns:
          type: array
          items:
            type: string
          example: ["Response time may not meet FDA requirements for critical systems"]
        regulatory_keywords:
          type: array
          items:
            type: string
          example: ["response time", "critical systems", "FDA compliance"]
        analysis_timestamp:
          type: string
          format: date-time

    Step3Analysis:
      type: object
      description: Compliance integration and final requirements
      properties:
        final_requirement_ears:
          type: string
          example: "When a critical user request is received, the system shall respond within 1 second to meet FDA compliance requirements"
        final_requirement_incose:
          type: string
          example: "The system shall respond to critical user requests within 1 second of receiving the request, in compliance with FDA Section 21.1"
        compliance_status:
          type: string
          enum: [COMPLIANT, NON_COMPLIANT, PARTIAL]
          example: "COMPLIANT"
        identified_conflicts:
          type: array
          items:
            type: string
          example: ["Original 2-second requirement conflicts with FDA 1-second requirement"]
        resolution_strategies:
          type: array
          items:
            type: string
          example: ["Reduce response time to 1 second", "Implement priority-based response system"]
        compliance_recommendations:
          type: array
          items:
            type: string
          example: ["Implement performance monitoring", "Add regulatory traceability"]
        regulatory_traceability:
          type: array
          items:
            type: string
          example: ["FDA Section 21.1", "ISO 14155 Section 4.2"]
        final_quality_rating:
          type: string
          example: "9"
        enhancement_summary:
          type: string
          example: "Enhanced requirement to meet FDA compliance while maintaining EARS format"
        analysis_timestamp:
          type: string
          format: date-time

tags:
  - name: Health
    description: Health check endpoints
  - name: Document Management
    description: Organization-based document management
  - name: File Upload
    description: Legacy file upload endpoints
  - name: Analysis
    description: Requirements analysis endpoints
  - name: Documentation
    description: API documentation endpoints 